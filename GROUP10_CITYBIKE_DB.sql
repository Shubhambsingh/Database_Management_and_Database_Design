-- TEAM 10
--Topic - CITYBIKE MANAGEMENT

-- SEJAL CHANDAK - 002789139
-- KRUPA PATEL   - 002789566
-- RISHABH SINGH - 002743830
-- ABHISHEK SAND - 002752069
-- SHUBHAM SINGH - 002762502

-- Step 1 - Create Database
DROP DATABASE IF EXISTS CITY_BIKE;
GO

CREATE database CITY_BIKE;
GO

-- Step 2 - USE Database for all the deployments 
USE CITY_BIKE;
GO

-- Step 3 - Created Functions for Table Level Check CONSTRAINT and COMPUTED COLUMNS


-- Create function to check if wallet value is valid

CREATE FUNCTION check_wallet_balance_limit (@balance DECIMAL(9,2))
RETURNS BIT
AS
BEGIN
    DECLARE @result BIT

    IF (@balance <= 10000.00)
        SET @result = 1
    ELSE
        SET @result = 0

    RETURN @result
END
GO

-- Create function to check if zipcode is valid

CREATE FUNCTION check_zip_code_MA (@zip_code VARCHAR(5))
RETURNS BIT
AS
BEGIN
    DECLARE @result BIT

    IF (@zip_code LIKE '[0][0-9][0-9][0-9][0-9]')
        SET @result = 1
    ELSE
        SET @result = 0

    RETURN @result
END
GO

-- Create function to check if BIKE value is valid

CREATE FUNCTION fn_bike_status_valid(@bike_status VARCHAR(32))
RETURNS BIT
AS
BEGIN
DECLARE @result BIT

    IF (@bike_status = 'AVAILABLE' OR @bike_status = 'UNAVAILABLE' OR @bike_status = 'INACTIVE')
        set @result = 1
    ELSE
        set @result = 0
	Return @result
END
GO

-- Create function to check if MEMBERSHIP value is valid

CREATE FUNCTION CheckMembershipAmount (@value DECIMAL(9,2))
RETURNS BIT
AS BEGIN
DECLARE @result BIT

    IF (@value BETWEEN 0 AND 20000)
        set @result= 1;
    ELSE
        set @result = 0;
	RETURN @result
END
GO

-- Create function to check if  mobilenumber is valid

CREATE FUNCTION ValidateMobileNumber(@MobileNumber BIGINT)
RETURNS BIT
AS
BEGIN
    DECLARE @Result BIT
    IF (LEN(CAST(@MobileNumber AS VARCHAR(10))) = 10)
        RETURN 1;
    ELSE
        RETURN 0;
	RETURN @Result;
END
GO


-- Create function to check if DropTime and Pickuptime value is valid
CREATE FUNCTION ValidateDropTime(@PickupTime DATE, @DropTime DATE)
RETURNS BIT
AS
BEGIN
    DECLARE @Result BIT;
    IF (@DropTime IS NULL OR @DropTime >= @PickupTime)
        SET @Result = 1;
    ELSE
        SET @Result = 0;
    RETURN @Result;
END
GO

-- Create function to check if EMPLOYEE age is valid
CREATE FUNCTION fn_CheckEmployeeAge(@DOB DATE)
RETURNS BIT
AS
BEGIN
    DECLARE @Result BIT = 0
    IF DATEDIFF(YEAR, @DOB, GETDATE()) >= 18
        SET @Result = 1
    RETURN @Result
END
GO

-- Create function to check if TICKETING_QUEUE value is valid

CREATE FUNCTION CheckTicketDescriptionLength(@desc VARCHAR(100)) 
RETURNS BIT 
AS
BEGIN
    IF (LEN(@desc) > 100)
        RETURN 0;
    RETURN 1;
END
GO


-- Create function to check if repairdate value is valid

CREATE FUNCTION funcValidateRepairDate(
    @OrderDate DATE,
    @RepairDate DATE
)
RETURNS BIT
AS
BEGIN
    DECLARE @Result BIT;

    IF (@RepairDate IS NULL OR @RepairDate >= @OrderDate)
        SET @Result = 1;
    ELSE
        SET @Result = 0;

    RETURN @Result;
END
GO


-- Create function to check if TRIP duration is valid

CREATE FUNCTION ValidateTripDuration(@StartTime DATETIME, @EndTime DATETIME)
RETURNS BIT
AS
BEGIN
    DECLARE @Result BIT

    IF DATEDIFF(MINUTE, @StartTime, @EndTime) >= 1
        SET @Result = 1;
    ELSE
        SET @Result = 0;

    RETURN @Result;
END
GO

-- Create function to create a computed column for Trip table

CREATE FUNCTION TimeCC(@StartTime DATETIME, @EndTime DATETIME)
RETURNS VARCHAR(20)
AS
BEGIN
DECLARE @TimeDiff VARCHAR(20)
DECLARE @Seconds INT
SET @Seconds = DATEDIFF(SECOND, @StartTime, @EndTime)

SET @TimeDiff = CONVERT(VARCHAR(2), @Seconds / 3600) + ':' 
              + RIGHT('0' + CONVERT(VARCHAR(2), (@Seconds / 60) % 60), 2) + ':'
              + RIGHT('0' + CONVERT(VARCHAR(2), @Seconds % 60), 2)

RETURN @TimeDiff
END
GO



-- Create function to check if FEEDBACK value is valid

CREATE FUNCTION ValidateFeedbackDate(@date DATE)
RETURNS bit
AS
BEGIN
	DECLARE @Valid bit;
	SET @Valid = 0;
	
	IF (@date <= GETDATE()) 
		SET @Valid = 1;
	
	RETURN @Valid;
	END
	GO


-- Create function to create a computed column for Rent table

CREATE FUNCTION ValidateDropTimeCC(@PickupTime DATETIME, @DropTime DATETIME)
RETURNS VARCHAR(20)
AS
BEGIN
DECLARE @TimeDiff VARCHAR(20)
DECLARE @Seconds INT
SET @Seconds = DATEDIFF(SECOND, @PickupTime, @DropTime)

SET @TimeDiff = CONVERT(VARCHAR(2), @Seconds / 3600) + ':' 
              + RIGHT('0' + CONVERT(VARCHAR(2), (@Seconds / 60) % 60), 2) + ':'
              + RIGHT('0' + CONVERT(VARCHAR(2), @Seconds % 60), 2)

RETURN @TimeDiff
END


-- Create function to calculate age based on date of birth(Computed column)
GO
CREATE FUNCTION fn_CalculateAge (@DOB DATE)
RETURNS INT
AS
BEGIN
DECLARE @Age INT
SELECT @Age = DATEDIFF(YEAR, @DOB, GETDATE())
RETURN @Age
END


-- Step 4 Create Store Procedure for Creating tables, Creating Sequences, Inserting Data, Creating Views

-- Store Procedure For Create Table

GO
CREATE PROCEDURE CREATETABLE
AS
BEGIN

-- Create DISCOUNT table (Coupon Name encrytion)
CREATE TABLE DISCOUNT (
    COUPON_ID INT NOT NULL,
    COUPON_NAME VARBINARY(MAX),
    COUPON_VALUE DECIMAL(6,2) NOT NULL,
    COUPON_STATUS VARCHAR(10) DEFAULT 'ACTIVE',
    CONSTRAINT PK_DISCOUNT PRIMARY KEY (COUPON_ID),
    CONSTRAINT CHK_DISCOUNT_STATUS CHECK (COUPON_STATUS IN ('ACTIVE', 'INACTIVE')),
);

-- Create WALLET table with check constraint based on function
CREATE TABLE WALLET (
    WALLET_ID INT NOT NULL,
    BALANCE DECIMAL(9,2) NOT NULL,
    CONSTRAINT PK_WALLET PRIMARY KEY (WALLET_ID),
    CONSTRAINT CHK_WALLET_BALANCE_LIMIT CHECK (dbo.check_wallet_balance_limit(BALANCE) = 1)
);

-- Create DOCK table with check constraint based on function
CREATE TABLE DOCK (
    DOCK_ID INT NOT NULL,
    DOCK_NAME VARCHAR(256) NOT NULL,
    CITY VARCHAR(32) NOT NULL,
    STATE VARCHAR(32) NOT NULL,
    ZIP_CODE VARCHAR(5) NOT NULL,
    LATITUDE DECIMAL(8,6) NOT NULL,
    LONGITUDE DECIMAL(9,6) NOT NULL,
    CONSTRAINT PK_DOCK PRIMARY KEY (DOCK_ID),
    CONSTRAINT CHK_ZIP_CODE CHECK (dbo.check_zip_code_MA(ZIP_CODE) = 1)
);

-- Create BIKE table with check constraint based on function
CREATE TABLE BIKE (
    BIKE_ID INT NOT NULL,
    BIKE_MODEL VARCHAR(32) NOT NULL,
    DOCK_ID INT NOT NULL,
    BIKE_STATUS VARCHAR(32) DEFAULT 'AVAILABLE' CONSTRAINT CHK_BIKE_STATUS_VALID CHECK (dbo.fn_bike_status_valid(BIKE_STATUS) = 1),
    CONSTRAINT PK_BIKE PRIMARY KEY (BIKE_ID),
    CONSTRAINT FK_BIKE_DOCK FOREIGN KEY (DOCK_ID) REFERENCES DOCK (DOCK_ID)
);

-- Create MEMBERSHIP table with check constraint based on function
CREATE TABLE MEMBERSHIP (
    MEMBERSHIP_ID INT NOT NULL,
    MEMBERSHIP_TYPE VARCHAR(32) NOT NULL,
    MEMBERSHIP_AMOUNT DECIMAL(9,2) NOT NULL,
    CONSTRAINT PK_MEMBERSHIP PRIMARY KEY (MEMBERSHIP_ID),
    CONSTRAINT CHK_MEMBERSHIP_TYPE CHECK (MEMBERSHIP_TYPE IN ('ONE-DAY','WEEKLY','BIWEEKLY','MONTHLY','QUATERLY','HALF-YEARLY','YEARLY','TWO-YEARS','DECADE','LIFETIME')),
    CONSTRAINT CHK_MEMBERSHIP_AMOUNT CHECK (dbo.CheckMembershipAmount(MEMBERSHIP_AMOUNT) = 1)
);

-- Create CUSTOMER table with check constraint based on function
CREATE TABLE CUSTOMER(
    CUSTOMER_ID INT NOT NULL,
    FIRST_NAME VARCHAR(32) NOT NULL,
    LAST_NAME VARCHAR(32) NOT NULL,
    MOBILE_NUMBER BIGINT NOT NULL,
    EMAIL_ID VARCHAR(32) NOT NULL,
    MEMBERSHIP_ID INT,
    MEMBERSHIP_END_DATE DATE,
    WALLET_ID INT NOT NULL,
    CONSTRAINT PK_CUSTOMER PRIMARY KEY (CUSTOMER_ID),
    CONSTRAINT FK_MEMBERSHIP FOREIGN KEY (MEMBERSHIP_ID)
        REFERENCES MEMBERSHIP (MEMBERSHIP_ID),
    CONSTRAINT FK_WALLET FOREIGN KEY (WALLET_ID)
        REFERENCES WALLET (WALLET_ID),
    CONSTRAINT UK_CUSTOMER_MOBILE_NUMBER UNIQUE (MOBILE_NUMBER),
    CONSTRAINT UK_CUSTOMER_EMAIL_ID UNIQUE (EMAIL_ID),
    CONSTRAINT CK_EMAIL CHECK (EMAIL_ID LIKE '%_@__%.%'),
    CONSTRAINT CK_MOBILE CHECK (dbo.ValidateMobileNumber(MOBILE_NUMBER) = 1)
);


-- Create RENT table with check constraint based on function
CREATE TABLE RENT (
    RENT_ID INT NOT NULL PRIMARY KEY,
    PICKUP_TIME DATETIME NOT NULL,
    DROP_TIME DATETIME,
    BIKE_ID INT NOT NULL,
    CUSTOMER_ID INT NOT NULL,
    COUPON_ID INT,
    PAYMENT_STATUS VARCHAR(10) CHECK(PAYMENT_STATUS = 'PAID' OR PAYMENT_STATUS = 'UNPAID'),
	 RentalDuration AS dbo.ValidateDropTimeCC(PICKUP_TIME, DROP_TIME) ,
    CONSTRAINT FK_BIKE 
        FOREIGN KEY (BIKE_ID) REFERENCES BIKE (BIKE_ID),
    CONSTRAINT FK_CUSTOMER 
        FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID),
    CONSTRAINT FK_COUPONID 
        FOREIGN KEY (COUPON_ID) REFERENCES DISCOUNT (COUPON_ID),
    CONSTRAINT CK_DROP_TIME CHECK (dbo.ValidateDropTime(PICKUP_TIME, DROP_TIME) = 1)
);


-- Create EMPLOYEE table with check constraint based on function and added computed column function - Age
CREATE TABLE Employee(
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(256) NOT NULL,
    LastName VARCHAR(256) NOT NULL,
    EmailID VARCHAR(256) NOT NULL UNIQUE,
    MobileNumber BIGINT NOT NULL UNIQUE,
    DOB DATE NOT NULL,
    Gender VARCHAR(6) NOT NULL CHECK(Gender IN ('MALE', 'FEMALE', 'OTHER')),
    Designation VARCHAR(256) NOT NULL,
    ReportingManager VARCHAR(256),
    EmployeeStatus VARCHAR(20) DEFAULT 'AVAILABLE',
    Age AS dbo.fn_CalculateAge(DOB),
	CONSTRAINT CK_EMAILID CHECK (EMAILID LIKE '%_@__%.%'),
    CONSTRAINT CK_EMPLOYEE_STATUS CHECK(EmployeeStatus IN ('AVAILABLE', 'RESIGNED')),
    CONSTRAINT CK_EMPLOYEE_AGE CHECK(dbo.fn_CheckEmployeeAge(DOB) = 1)
);


-- Create TICKETING_QUEUE table with check constraint based on function
CREATE TABLE TICKETING_QUEUE(
    TICKET_ID INT PRIMARY KEY,
    CUSTOMER_ID INT NOT NULL,
    CONSTRAINT FK_CUSTOMERS FOREIGN KEY (CUSTOMER_ID)
        REFERENCES CUSTOMER (CUSTOMER_ID),
    EmployeeID INT NOT NULL,
    CONSTRAINT FK_AGENTS FOREIGN KEY (EmployeeID)
        REFERENCES EMPLOYEE (EmployeeID),
    TICKET_DESC VARCHAR(100) NOT NULL,
    TICKET_STATUS VARCHAR(10) NOT NULL,
    CONSTRAINT CK_TICKET_STATUS CHECK (TICKET_STATUS IN ('ASSIGNED', 'CLOSED')),
    CONSTRAINT CK_TICKET_DESC CHECK (dbo.CheckTicketDescriptionLength(TICKET_DESC) = 1)
);


-- Create TECHNICIAN table with check constraint based on function
CREATE TABLE TECHNICIAN (
    AGENT_ID INT NOT NULL PRIMARY KEY,
    TICKET_ID INT NOT NULL,
    CONSTRAINT FK_TICKET FOREIGN KEY (TICKET_ID) REFERENCES TICKETING_QUEUE (TICKET_ID),
    ORDER_DATE DATE,
    CUSTOMER_TECHNICIAN_REMARK VARCHAR(32),
    REPAIR_DATE DATE,
    CONSTRAINT CHK_REPAIR_DATE CHECK (dbo.funcValidateRepairDate(ORDER_DATE, REPAIR_DATE) = 1)
);


-- Create TRIP table with check constraint based on function
CREATE TABLE TRIP(
    TRIP_ID INT NOT NULL PRIMARY KEY,
    CUSTOMER_ID INT NOT NULL,
    CONSTRAINT FK_CUSTOMERS_TRIP FOREIGN KEY (CUSTOMER_ID)
        REFERENCES CUSTOMER (CUSTOMER_ID),
    BIKE_ID INT NOT NULL,
    CONSTRAINT FK_BIKE_TRIP FOREIGN KEY (BIKE_ID)
        REFERENCES BIKE (BIKE_ID),
    START_DOCK_ID INT NOT NULL,
    CONSTRAINT FK_DOCK_START FOREIGN KEY (START_DOCK_ID)
        REFERENCES DOCK (DOCK_ID),
    END_DOCK_ID INT NOT NULL,
    CONSTRAINT FK_DOCK_END FOREIGN KEY (END_DOCK_ID)
        REFERENCES DOCK (DOCK_ID),
    START_TIME DATETIME NOT NULL,
    END_TIME DATETIME NOT NULL,
	TripDuration AS dbo.TimeCC(START_TIME, END_TIME),
    CONSTRAINT CHK_TRIP_TIME CHECK (dbo.ValidateTripDuration(START_TIME, END_TIME) = 1)
);


-- Create FEEDBACK table with check constraint based on function
CREATE TABLE FEEDBACK(
    FEEDBACK_ID INT NOT NULL PRIMARY KEY,
	FEEDBACK_DATE DATE NOT NULL,
    CUSTOMER_ID INT NOT NULL,
    CONSTRAINT FK_CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID)
    REFERENCES CUSTOMER (CUSTOMER_ID),
    FEEDBACK_DESCRIPTION VARCHAR(256) NOT NULL,
    CONSTRAINT CHK_FEEDBACK_DESC_LEN CHECK (LEN(FEEDBACK_DESCRIPTION) <= 256),
    CONSTRAINT CHK_FEEDBACK_DATE CHECK (dbo.ValidateFeedbackDate(FEEDBACK_DATE) = 1)
);

END
GO

-- Stored Procedure for Creating Sequences

CREATE PROCEDURE SEQUENCETABLE
AS
BEGIN

	CREATE SEQUENCE MEMBERSHIP_ID_SEQUENCE
    START WITH 1
    INCREMENT BY 1
    CACHE 10
    NO CYCLE;

	CREATE SEQUENCE COUPON_ID_SEQUENCE
    START WITH 10
    INCREMENT BY 1
    CACHE 10
    NO CYCLE;

	CREATE SEQUENCE DOCK_ID_SEQUENCE
    START WITH 100
    INCREMENT BY 1
    CACHE 10
    NO CYCLE;

	CREATE SEQUENCE BIKE_ID_SEQUENCE
    START WITH 1000
    INCREMENT BY 1
    CACHE 10
    NO CYCLE;

	CREATE SEQUENCE CUSTOMER_ID_SEQUENCE
    START WITH 10000
    INCREMENT BY 1
    CACHE 10
    NO CYCLE;

	CREATE SEQUENCE WALLET_ID_SEQUENCE
    START WITH 100000
    INCREMENT BY 1
    CACHE 10
    NO CYCLE;

	CREATE SEQUENCE RENT_ID_SEQUENCE
    START WITH 1000000
    INCREMENT BY 1
    CACHE 10
    NO CYCLE;

	CREATE SEQUENCE EMPLOYEE_ID_SEQUENCE
    START WITH 10000000
    INCREMENT BY 1
    CACHE 10
    NO CYCLE;

	CREATE SEQUENCE TICKET_ID_SEQUENCE
    START WITH 100000000
    INCREMENT BY 1
    CACHE 10
    NO CYCLE;

	CREATE SEQUENCE AGENT_ID_SEQUENCE
    START WITH 1
    INCREMENT BY 1
    CACHE 10
    NO CYCLE;

	CREATE SEQUENCE TRIP_ID_SEQUENCE
    START WITH 10
    INCREMENT BY 1
    CACHE 10
    NO CYCLE;

	CREATE SEQUENCE FEEDBACK_ID_SEQUENCE
    START WITH 100
    INCREMENT BY 1
    CACHE 10
    NO CYCLE;
END
GO
 
 -- Stored Procedure for Inserting Data into all the Tables

CREATE PROCEDURE INSERTTABLE
AS
BEGIN

--INSERTS IN DISCOUNT Table

-- ENCRYPTING COUPON_NAME COLUMN
CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'DAMG6205';
CREATE CERTIFICATE Certificate_test WITH SUBJECT = 'Protect my data';
CREATE SYMMETRIC KEY SymKey_test WITH ALGORITHM = AES_256 ENCRYPTION BY CERTIFICATE Certificate_test;

OPEN SYMMETRIC KEY SymKey_test DECRYPTION BY CERTIFICATE Certificate_test;
INSERT INTO DISCOUNT (COUPON_ID, COUPON_NAME, COUPON_VALUE,COUPON_STATUS) VALUES (NEXT VALUE FOR COUPON_ID_SEQUENCE,EncryptByKey(Key_GUID(N'SymKey_test'), 'BECITY'),20,'ACTIVE');
INSERT INTO DISCOUNT (COUPON_ID, COUPON_NAME, COUPON_VALUE,COUPON_STATUS) VALUES (NEXT VALUE FOR COUPON_ID_SEQUENCE,EncryptByKey(Key_GUID(N'SymKey_test'), 'BECITY10'),10,'ACTIVE');
INSERT INTO DISCOUNT (COUPON_ID, COUPON_NAME, COUPON_VALUE,COUPON_STATUS) VALUES (NEXT VALUE FOR COUPON_ID_SEQUENCE,EncryptByKey(Key_GUID(N'SymKey_test'), 'BECITY05'),05,'ACTIVE');
INSERT INTO DISCOUNT (COUPON_ID, COUPON_NAME, COUPON_VALUE,COUPON_STATUS) VALUES (NEXT VALUE FOR COUPON_ID_SEQUENCE,EncryptByKey(Key_GUID(N'SymKey_test'), 'BECITY20'),20,'ACTIVE');
INSERT INTO DISCOUNT (COUPON_ID, COUPON_NAME, COUPON_VALUE,COUPON_STATUS) VALUES (NEXT VALUE FOR COUPON_ID_SEQUENCE,EncryptByKey(Key_GUID(N'SymKey_test'), 'BECITY1'),10,'ACTIVE');
INSERT INTO DISCOUNT (COUPON_ID, COUPON_NAME, COUPON_VALUE,COUPON_STATUS) VALUES (NEXT VALUE FOR COUPON_ID_SEQUENCE,EncryptByKey(Key_GUID(N'SymKey_test'), 'BECITY2'),2,'ACTIVE');
INSERT INTO DISCOUNT (COUPON_ID, COUPON_NAME, COUPON_VALUE,COUPON_STATUS) VALUES (NEXT VALUE FOR COUPON_ID_SEQUENCE,EncryptByKey(Key_GUID(N'SymKey_test'), 'BECITY15'),15,'ACTIVE');
INSERT INTO DISCOUNT (COUPON_ID, COUPON_NAME, COUPON_VALUE,COUPON_STATUS) VALUES (NEXT VALUE FOR COUPON_ID_SEQUENCE,EncryptByKey(Key_GUID(N'SymKey_test'), 'SAVE10'),10,'ACTIVE');
INSERT INTO DISCOUNT (COUPON_ID, COUPON_NAME, COUPON_VALUE,COUPON_STATUS) VALUES (NEXT VALUE FOR COUPON_ID_SEQUENCE,EncryptByKey(Key_GUID(N'SymKey_test'), 'SAVE05'),05,'ACTIVE');
INSERT INTO DISCOUNT (COUPON_ID, COUPON_NAME, COUPON_VALUE,COUPON_STATUS) VALUES (NEXT VALUE FOR COUPON_ID_SEQUENCE,EncryptByKey(Key_GUID(N'SymKey_test'), 'SAVE15'),15,'ACTIVE');
INSERT INTO DISCOUNT (COUPON_ID, COUPON_NAME, COUPON_VALUE,COUPON_STATUS) VALUES (NEXT VALUE FOR COUPON_ID_SEQUENCE,EncryptByKey(Key_GUID(N'SymKey_test'),'SAVE20'),20,'ACTIVE');
INSERT INTO DISCOUNT (COUPON_ID, COUPON_NAME, COUPON_VALUE,COUPON_STATUS) VALUES (NEXT VALUE FOR COUPON_ID_SEQUENCE,EncryptByKey(Key_GUID(N'SymKey_test'),'SAVE25'),25,'ACTIVE');
INSERT INTO DISCOUNT (COUPON_ID, COUPON_NAME, COUPON_VALUE,COUPON_STATUS) VALUES (NEXT VALUE FOR COUPON_ID_SEQUENCE,EncryptByKey(Key_GUID(N'SymKey_test'),'SAVE30'),30,'ACTIVE');
INSERT INTO DISCOUNT (COUPON_ID, COUPON_NAME, COUPON_VALUE,COUPON_STATUS) VALUES (NEXT VALUE FOR COUPON_ID_SEQUENCE,EncryptByKey(Key_GUID(N'SymKey_test'),'SAVE40'),40,'ACTIVE');
INSERT INTO DISCOUNT (COUPON_ID, COUPON_NAME, COUPON_VALUE,COUPON_STATUS) VALUES (NEXT VALUE FOR COUPON_ID_SEQUENCE,EncryptByKey(Key_GUID(N'SymKey_test'),'SAVE50'),50,'ACTIVE');
INSERT INTO DISCOUNT (COUPON_ID, COUPON_NAME, COUPON_VALUE,COUPON_STATUS) VALUES (NEXT VALUE FOR COUPON_ID_SEQUENCE,EncryptByKey(Key_GUID(N'SymKey_test'),'SAVE80'),80,'INACTIVE');
CLOSE SYMMETRIC KEY SymKey_test;


-- INSERT INTO MEMBERSHIP Table

INSERT INTO MEMBERSHIP (MEMBERSHIP_ID, MEMBERSHIP_TYPE, MEMBERSHIP_AMOUNT) VALUES (NEXT VALUE FOR MEMBERSHIP_ID_SEQUENCE,'ONE-DAY',05.00);
INSERT INTO MEMBERSHIP (MEMBERSHIP_ID, MEMBERSHIP_TYPE, MEMBERSHIP_AMOUNT) VALUES (NEXT VALUE FOR MEMBERSHIP_ID_SEQUENCE,'WEEKLY',30.00);
INSERT INTO MEMBERSHIP (MEMBERSHIP_ID, MEMBERSHIP_TYPE, MEMBERSHIP_AMOUNT) VALUES (NEXT VALUE FOR MEMBERSHIP_ID_SEQUENCE,'BIWEEKLY',50.00);
INSERT INTO MEMBERSHIP (MEMBERSHIP_ID, MEMBERSHIP_TYPE, MEMBERSHIP_AMOUNT) VALUES (NEXT VALUE FOR MEMBERSHIP_ID_SEQUENCE,'MONTHLY',100.00);
INSERT INTO MEMBERSHIP (MEMBERSHIP_ID, MEMBERSHIP_TYPE, MEMBERSHIP_AMOUNT) VALUES (NEXT VALUE FOR MEMBERSHIP_ID_SEQUENCE,'QUATERLY',300.00);
INSERT INTO MEMBERSHIP (MEMBERSHIP_ID, MEMBERSHIP_TYPE, MEMBERSHIP_AMOUNT) VALUES (NEXT VALUE FOR MEMBERSHIP_ID_SEQUENCE,'HALF-YEARLY',500.00);
INSERT INTO MEMBERSHIP (MEMBERSHIP_ID, MEMBERSHIP_TYPE, MEMBERSHIP_AMOUNT) VALUES (NEXT VALUE FOR MEMBERSHIP_ID_SEQUENCE,'YEARLY',950.00);
INSERT INTO MEMBERSHIP (MEMBERSHIP_ID, MEMBERSHIP_TYPE, MEMBERSHIP_AMOUNT) VALUES (NEXT VALUE FOR MEMBERSHIP_ID_SEQUENCE,'TWO-YEARS',1600.00);
INSERT INTO MEMBERSHIP (MEMBERSHIP_ID, MEMBERSHIP_TYPE, MEMBERSHIP_AMOUNT) VALUES (NEXT VALUE FOR MEMBERSHIP_ID_SEQUENCE,'DECADE',8000.00);
INSERT INTO MEMBERSHIP (MEMBERSHIP_ID, MEMBERSHIP_TYPE, MEMBERSHIP_AMOUNT) VALUES (NEXT VALUE FOR MEMBERSHIP_ID_SEQUENCE,'LIFETIME',14999.00);



-- INSERT INTO DOCKS and BIKE Tables

INSERT INTO DOCK (DOCK_ID, DOCK_NAME, CITY, STATE, ZIP_CODE, LATITUDE, LONGITUDE) VALUES (NEXT VALUE FOR DOCK_ID_SEQUENCE,'1200 BEACON ST','BROOKLINE','MASSACHUSETTS','02446',42.3441489,-71.1146736)
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2020',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2020',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2020',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2020',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2010',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2010',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2010',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2010',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO DOCK (DOCK_ID, DOCK_NAME, CITY, STATE, ZIP_CODE, LATITUDE, LONGITUDE) VALUES (NEXT VALUE FOR DOCK_ID_SEQUENCE,'160 ARSENAL','WATERTOWN','MASSACHUSETTS','02472',42.364664,-71.1756938);
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2010',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2010',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2010',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2015',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2015',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2015',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO DOCK (DOCK_ID, DOCK_NAME, CITY, STATE, ZIP_CODE, LATITUDE, LONGITUDE) VALUES (NEXT VALUE FOR DOCK_ID_SEQUENCE,'175 N HARVARD ST','BOSTON','MASSACHUSETTS','02134',42.363796,-71.129164);
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2015',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2015',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2015',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2020',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2020',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2020',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2020',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2020',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO DOCK (DOCK_ID, DOCK_NAME, CITY, STATE, ZIP_CODE, LATITUDE, LONGITUDE) VALUES (NEXT VALUE FOR DOCK_ID_SEQUENCE,'191 BEACON ST','SOMERVILLE','MASSACHUSETTS','02116',42.3803233,-71.1087861);
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2020',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2010',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2010',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2010',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2010',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2010',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2010',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2010',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO DOCK (DOCK_ID, DOCK_NAME, CITY, STATE, ZIP_CODE, LATITUDE, LONGITUDE) VALUES (NEXT VALUE FOR DOCK_ID_SEQUENCE,'2 HUMMINGBIRD LANE AT OLMSTED GREEN','BOSTON','MASSACHUSETTS','02126',42.28887,-71.095003);
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2015',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2015',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2015',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2015',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2015',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2015',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2020',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2020',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2020',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2020',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO DOCK (DOCK_ID, DOCK_NAME, CITY, STATE, ZIP_CODE, LATITUDE, LONGITUDE) VALUES (NEXT VALUE FOR DOCK_ID_SEQUENCE,'1203 Boylston ST','Boston','MASSACHUSETTS','02215',42.3041489,-70.9283736)
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2021',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2021',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2021',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2021',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO DOCK (DOCK_ID, DOCK_NAME, CITY, STATE, ZIP_CODE, LATITUDE, LONGITUDE) VALUES (NEXT VALUE FOR DOCK_ID_SEQUENCE,'776 Park Street','Waltham','MASSACHUSETTS','02112',41.9238489,-74.7293875)
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2021',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2021',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2021',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2021',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO DOCK (DOCK_ID, DOCK_NAME, CITY, STATE, ZIP_CODE, LATITUDE, LONGITUDE) VALUES (NEXT VALUE FOR DOCK_ID_SEQUENCE,'36 China Town','Worchester','MASSACHUSETTS','02301',42.3041489,-71.2341136)
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2021',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2021',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2021',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'AVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2021',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO DOCK (DOCK_ID, DOCK_NAME, CITY, STATE, ZIP_CODE, LATITUDE, LONGITUDE) VALUES (NEXT VALUE FOR DOCK_ID_SEQUENCE,'201 Park Drive','BOSTON','MASSACHUSETTS','02112',42.6638489,-72.2345125)
INSERT INTO DOCK (DOCK_ID, DOCK_NAME, CITY, STATE, ZIP_CODE, LATITUDE, LONGITUDE) VALUES (NEXT VALUE FOR DOCK_ID_SEQUENCE,'396 Hungtington Ave','BOSTON','MASSACHUSETTS','02112',43.1118489,-72.9001295)
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2023',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2023',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2023',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');
INSERT INTO BIKE (BIKE_ID, BIKE_MODEL, DOCK_ID, BIKE_STATUS) VALUES (NEXT VALUE FOR BIKE_ID_SEQUENCE,'CITY2023',(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'DOCK_ID_SEQUENCE'),'UNAVAILABLE');


--INSERTS INTO EMPLOYEE Table

INSERT INTO EMPLOYEE (EmployeeID, FirstName, LastName, EmailID, MobileNumber, DOB, GENDER, DESIGNATION, ReportingManager,EmployeeStatus) VALUES (NEXT VALUE FOR Employee_ID_SEQUENCE,'LILLIAN','WALKER','LILLIAN.WALKER@CITYBIKES.COM',1910872484,'27NOV97','FEMALE','MANAGER',NULL,'AVAILABLE');
INSERT INTO EMPLOYEE (EmployeeID, FirstName, LastName, EmailID, MobileNumber, DOB, GENDER, DESIGNATION, ReportingManager,EmployeeStatus) VALUES (NEXT VALUE FOR Employee_ID_SEQUENCE,'DIANE','ROBINSON','DIANE.ROBINSON@CITYBIKES.COM',1279518760,'25JAN95','FEMALE','CUSTOMER TECHNICIAN', (SELECT CAST(CONCAT (LastName,', ',FirstName) as VARCHAR(256)) FROM EMPLOYEE WHERE DESIGNATION = 'MANAGER'),'AVAILABLE');
INSERT INTO EMPLOYEE (EmployeeID, FirstName, LastName, EmailID, MobileNumber, DOB, GENDER, DESIGNATION, ReportingManager,EmployeeStatus)
VALUES (NEXT VALUE FOR Employee_ID_SEQUENCE,'JOHN','SMITH','JOHN.SMITH@CITYBIKES.COM',9822543210,'15FEB88','MALE','MECHANIC',
(SELECT CAST(CONCAT (LastName,', ',FirstName) as VARCHAR(256)) FROM EMPLOYEE WHERE DESIGNATION = 'MANAGER'),'AVAILABLE');

INSERT INTO EMPLOYEE (EmployeeID, FirstName, LastName, EmailID, MobileNumber, DOB, GENDER, DESIGNATION, ReportingManager,EmployeeStatus)
VALUES (NEXT VALUE FOR Employee_ID_SEQUENCE,'AMY','WILLIAMS','AMY.WILLIAMS@CITYBIKES.COM',8765432109,'10MAR91','FEMALE','SALES ASSOCIATE',
(SELECT CAST(CONCAT (LastName,', ',FirstName) as VARCHAR(256)) FROM EMPLOYEE WHERE DESIGNATION = 'MANAGER'),'AVAILABLE');

INSERT INTO EMPLOYEE (EmployeeID, FirstName, LastName, EmailID, MobileNumber, DOB, GENDER, DESIGNATION, ReportingManager,EmployeeStatus)
VALUES (NEXT VALUE FOR Employee_ID_SEQUENCE,'MICHAEL','LEE','MICHAEL.LEE@CITYBIKES.COM',7654321098,'05APR94','MALE','MECHANICAL ENGINEER',
(SELECT CAST(CONCAT (LastName,', ',FirstName) as VARCHAR(256)) FROM EMPLOYEE WHERE DESIGNATION = 'MANAGER'),'AVAILABLE');

INSERT INTO EMPLOYEE (EmployeeID, FirstName, LastName, EmailID, MobileNumber, DOB, GENDER, DESIGNATION, ReportingManager,EmployeeStatus)
VALUES (NEXT VALUE FOR Employee_ID_SEQUENCE,'SARAH','JOHNSON','SARAH.JOHNSON@CITYBIKES.COM',6543210987,'20MAY89','FEMALE','MARKETING COORDINATOR',
(SELECT CAST(CONCAT (LastName,', ',FirstName) as VARCHAR(256)) FROM EMPLOYEE WHERE DESIGNATION = 'MANAGER'),'AVAILABLE');

INSERT INTO EMPLOYEE (EmployeeID, FirstName, LastName, EmailID, MobileNumber, DOB, GENDER, DESIGNATION, ReportingManager,EmployeeStatus)
VALUES (NEXT VALUE FOR Employee_ID_SEQUENCE,'DAVID','BROWN','DAVID.BROWN@CITYBIKES.COM',5432109876,'08JUN92','MALE','WAREHOUSE SUPERVISOR',
(SELECT CAST(CONCAT (LastName,', ',FirstName) as VARCHAR(256)) FROM EMPLOYEE WHERE DESIGNATION = 'MANAGER'),'AVAILABLE');

INSERT INTO EMPLOYEE (EmployeeID, FirstName, LastName, EmailID, MobileNumber, DOB, GENDER, DESIGNATION, ReportingManager,EmployeeStatus)
VALUES (NEXT VALUE FOR Employee_ID_SEQUENCE,'EMMA','TAYLOR','EMMA.TAYLOR@CITYBIKES.COM',4321098765,'25JUL87','FEMALE','ACCOUNTANT',
(SELECT CAST(CONCAT (LastName,', ',FirstName) as VARCHAR(256)) FROM EMPLOYEE WHERE DESIGNATION = 'MANAGER'),'AVAILABLE');

INSERT INTO EMPLOYEE (EmployeeID, FirstName, LastName, EmailID, MobileNumber, DOB, GENDER, DESIGNATION, ReportingManager,EmployeeStatus)
VALUES (NEXT VALUE FOR Employee_ID_SEQUENCE,'ALEXANDER','WANG','ALEXANDER.WANG@CITYBIKES.COM',2109876543,'29SEP93','MALE','CUSTOMER SERVICE REPRESENTATIVE',
(SELECT CAST(CONCAT (LastName,', ',FirstName) as VARCHAR(256)) FROM EMPLOYEE WHERE DESIGNATION = 'MANAGER'),'AVAILABLE');

INSERT INTO EMPLOYEE (EmployeeID, FirstName, LastName, EmailID, MobileNumber, DOB, GENDER, DESIGNATION, ReportingManager,EmployeeStatus)
VALUES (NEXT VALUE FOR Employee_ID_SEQUENCE,'OLIVIA','LEE','OLIVIA.LEE@CITYBIKES.COM',1098765432,'16OCT88','FEMALE','SALES MANAGER',
(SELECT CAST(CONCAT (LastName,', ',FirstName) as VARCHAR(256)) FROM EMPLOYEE WHERE DESIGNATION = 'MANAGER'),'AVAILABLE');

INSERT INTO EMPLOYEE (EmployeeID, FirstName, LastName, EmailID, MobileNumber, DOB, GENDER, DESIGNATION, ReportingManager,EmployeeStatus)
VALUES (NEXT VALUE FOR Employee_ID_SEQUENCE,'WILLIAM','CHEN','WILLIAM.CHEN@CITYBIKES.COM',0907654321,'03NOV91','MALE','IT SUPPORT SPECIALIST',
(SELECT CAST(CONCAT (LastName,', ',FirstName) as VARCHAR(256)) FROM EMPLOYEE WHERE DESIGNATION = 'MANAGER'),'AVAILABLE');

INSERT INTO EMPLOYEE (EmployeeID, FirstName, LastName, EmailID, MobileNumber, DOB, GENDER, DESIGNATION, ReportingManager,EmployeeStatus)
VALUES (NEXT VALUE FOR Employee_ID_SEQUENCE,'EMILY','ZHANG','EMILY.ZHANG@CITYBIKES.COM',9876543210,'20DEC86','FEMALE','LOGISTICS COORDINATOR',
(SELECT CAST(CONCAT (LastName,', ',FirstName) as VARCHAR(256)) FROM EMPLOYEE WHERE DESIGNATION = 'MANAGER'),'AVAILABLE');


-- Insert Into WALLET,CUSTOMER ,TICKETING_QUEUE and TECHNICIAN Tables

INSERT INTO WALLET (WALLET_ID, BALANCE) VALUES (NEXT VALUE FOR WALLET_ID_SEQUENCE,500.2);
INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, MOBILE_NUMBER, EMAIL_ID, MEMBERSHIP_ID, MEMBERSHIP_END_DATE, WALLET_ID) VALUES (NEXT VALUE FOR CUSTOMER_ID_SEQUENCE,'LOIS','WALKER',2016268722,'LOIS.WALKER@HOTMAIL.COM',1,GETDATE() + 7 ,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'WALLET_ID_SEQUENCE'));
INSERT INTO TICKETING_QUEUE (TICKET_ID, CUSTOMER_ID, EmployeeID, TICKET_DESC, TICKET_STATUS) VALUES (NEXT VALUE FOR TICKET_ID_SEQUENCE, (SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'CUSTOMER_ID_SEQUENCE'),10000000,'MEMBERSHIP RENEWAL ISSUES','ASSIGNED');
INSERT INTO TECHNICIAN (AGENT_ID, TICKET_ID, ORDER_DATE, CUSTOMER_TECHNICIAN_REMARK, REPAIR_DATE) VALUES (NEXT VALUE FOR AGENT_ID_SEQUENCE,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'TICKET_ID_SEQUENCE'),'2023-03-04','Software needs Upgradation','2023-03-21');
INSERT INTO WALLET (WALLET_ID, BALANCE) VALUES (NEXT VALUE FOR WALLET_ID_SEQUENCE,1000.10);
INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, MOBILE_NUMBER, EMAIL_ID, MEMBERSHIP_ID, MEMBERSHIP_END_DATE, WALLET_ID) VALUES (NEXT VALUE FOR CUSTOMER_ID_SEQUENCE,'JAMES','TIE',8576992031,'JAMES.TIE@GMAIL.COM',2,GETDATE() + 30 ,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'WALLET_ID_SEQUENCE'));
INSERT INTO TICKETING_QUEUE (TICKET_ID, CUSTOMER_ID, EmployeeID, TICKET_DESC, TICKET_STATUS) VALUES (NEXT VALUE FOR TICKET_ID_SEQUENCE, (SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'CUSTOMER_ID_SEQUENCE'),10000001,'CITY BIKE MALFUNCTIONING','CLOSED');
INSERT INTO TECHNICIAN (AGENT_ID, TICKET_ID, ORDER_DATE, CUSTOMER_TECHNICIAN_REMARK, REPAIR_DATE) VALUES (NEXT VALUE FOR AGENT_ID_SEQUENCE,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'TICKET_ID_SEQUENCE'),'2023-03-01','BIKE needs minor Repair','2023-03-16');
INSERT INTO WALLET (WALLET_ID, BALANCE) VALUES (NEXT VALUE FOR WALLET_ID_SEQUENCE,2100.56);
INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, MOBILE_NUMBER, EMAIL_ID, MEMBERSHIP_ID, MEMBERSHIP_END_DATE, WALLET_ID) VALUES (NEXT VALUE FOR CUSTOMER_ID_SEQUENCE,'JAYESH','PATEL',9892118777,'RAJ.PATEL@HOTMAIL.COM',1,GETDATE() + 7 ,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'WALLET_ID_SEQUENCE'));
INSERT INTO TICKETING_QUEUE (TICKET_ID, CUSTOMER_ID, EmployeeID, TICKET_DESC, TICKET_STATUS) VALUES (NEXT VALUE FOR TICKET_ID_SEQUENCE, (SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'CUSTOMER_ID_SEQUENCE'),10000000,'PAYMENT ISSUES','CLOSED');
INSERT INTO TECHNICIAN (AGENT_ID, TICKET_ID, ORDER_DATE, CUSTOMER_TECHNICIAN_REMARK, REPAIR_DATE) VALUES (NEXT VALUE FOR AGENT_ID_SEQUENCE,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'TICKET_ID_SEQUENCE'),'2023-04-01','Check Payment Source','2023-04-05');
INSERT INTO WALLET (WALLET_ID, BALANCE) VALUES (NEXT VALUE FOR WALLET_ID_SEQUENCE,150.2);
INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, MOBILE_NUMBER, EMAIL_ID, MEMBERSHIP_ID, MEMBERSHIP_END_DATE, WALLET_ID) VALUES (NEXT VALUE FOR CUSTOMER_ID_SEQUENCE,'SANTOSH','CHANDAK',7801928817,'CHANDAK.SANTOSH@HOTMAIL.COM',3,GETDATE() + 365 ,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'WALLET_ID_SEQUENCE'));
INSERT INTO TICKETING_QUEUE (TICKET_ID, CUSTOMER_ID, EmployeeID, TICKET_DESC, TICKET_STATUS) VALUES (NEXT VALUE FOR TICKET_ID_SEQUENCE, (SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'CUSTOMER_ID_SEQUENCE'),10000002,'MEMBERSHIP ISSUES','ASSIGNED');
INSERT INTO TECHNICIAN (AGENT_ID, TICKET_ID, ORDER_DATE, CUSTOMER_TECHNICIAN_REMARK, REPAIR_DATE) VALUES (NEXT VALUE FOR AGENT_ID_SEQUENCE,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'TICKET_ID_SEQUENCE'),'2023-03-04','Need to check with User on this','2023-03-21');

INSERT INTO WALLET (WALLET_ID, BALANCE) VALUES (NEXT VALUE FOR WALLET_ID_SEQUENCE,356.12);
INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, MOBILE_NUMBER, EMAIL_ID, MEMBERSHIP_ID, MEMBERSHIP_END_DATE, WALLET_ID) VALUES (NEXT VALUE FOR CUSTOMER_ID_SEQUENCE,'BHOOPENDRA','KUMAR',2010068722,'BHOOPENDRA.KUMAR@HOTMAIL.COM',3,GETDATE() + 365 ,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'WALLET_ID_SEQUENCE'));
INSERT INTO TICKETING_QUEUE (TICKET_ID, CUSTOMER_ID, EmployeeID, TICKET_DESC, TICKET_STATUS) VALUES (NEXT VALUE FOR TICKET_ID_SEQUENCE, (SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'CUSTOMER_ID_SEQUENCE'),10000003,'BIKE ISSUES','ASSIGNED');
INSERT INTO TECHNICIAN (AGENT_ID, TICKET_ID, ORDER_DATE, CUSTOMER_TECHNICIAN_REMARK, REPAIR_DATE) VALUES (NEXT VALUE FOR AGENT_ID_SEQUENCE,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'TICKET_ID_SEQUENCE'),'2023-04-04','Machine needs Repair','2023-04-06');

INSERT INTO WALLET (WALLET_ID, BALANCE) VALUES (NEXT VALUE FOR WALLET_ID_SEQUENCE,1523.2);
INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, MOBILE_NUMBER, EMAIL_ID, MEMBERSHIP_ID, MEMBERSHIP_END_DATE, WALLET_ID) VALUES (NEXT VALUE FOR CUSTOMER_ID_SEQUENCE,'DAVID','BECHAM',9011268722,'DAVID.BECHAM@HOTMAIL.COM',2,GETDATE() + 30 ,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'WALLET_ID_SEQUENCE'));
INSERT INTO TICKETING_QUEUE (TICKET_ID, CUSTOMER_ID, EmployeeID, TICKET_DESC, TICKET_STATUS) VALUES (NEXT VALUE FOR TICKET_ID_SEQUENCE, (SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'CUSTOMER_ID_SEQUENCE'),10000000,'GEAR ISSUES','CLOSED');
INSERT INTO TECHNICIAN (AGENT_ID, TICKET_ID, ORDER_DATE, CUSTOMER_TECHNICIAN_REMARK, REPAIR_DATE) VALUES (NEXT VALUE FOR AGENT_ID_SEQUENCE,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'TICKET_ID_SEQUENCE'),'2023-02-04','Resolved Issue','2023-02-21');

INSERT INTO WALLET (WALLET_ID, BALANCE) VALUES (NEXT VALUE FOR WALLET_ID_SEQUENCE,5600.10);
INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, MOBILE_NUMBER, EMAIL_ID, MEMBERSHIP_ID, MEMBERSHIP_END_DATE, WALLET_ID) VALUES (NEXT VALUE FOR CUSTOMER_ID_SEQUENCE,'CHRIS','BROWN',4325632121,'CHRIS.BROWN@HOTMAIL.COM',1,GETDATE() + 7 ,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'WALLET_ID_SEQUENCE'));
INSERT INTO TICKETING_QUEUE (TICKET_ID, CUSTOMER_ID, EmployeeID, TICKET_DESC, TICKET_STATUS) VALUES (NEXT VALUE FOR TICKET_ID_SEQUENCE, (SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'CUSTOMER_ID_SEQUENCE'),10000002,'PAYMENT ISSUES','ASSIGNED');
INSERT INTO TECHNICIAN (AGENT_ID, TICKET_ID, ORDER_DATE, CUSTOMER_TECHNICIAN_REMARK, REPAIR_DATE) VALUES (NEXT VALUE FOR AGENT_ID_SEQUENCE,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'TICKET_ID_SEQUENCE'),'2023-03-21','CHECK PAYMENT SOURCE','2023-03-29');

INSERT INTO WALLET (WALLET_ID, BALANCE) VALUES (NEXT VALUE FOR WALLET_ID_SEQUENCE,50.55);
INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, MOBILE_NUMBER, EMAIL_ID, MEMBERSHIP_ID, MEMBERSHIP_END_DATE, WALLET_ID) VALUES (NEXT VALUE FOR CUSTOMER_ID_SEQUENCE,'LISA','LEE',9096268722,'LISA.LEE@HOTMAIL.COM',1,GETDATE() + 7 ,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'WALLET_ID_SEQUENCE'));
INSERT INTO TICKETING_QUEUE (TICKET_ID, CUSTOMER_ID, EmployeeID, TICKET_DESC, TICKET_STATUS) VALUES (NEXT VALUE FOR TICKET_ID_SEQUENCE, (SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'CUSTOMER_ID_SEQUENCE'),10000005,'REFUND','CLOSED');
INSERT INTO TECHNICIAN (AGENT_ID, TICKET_ID, ORDER_DATE, CUSTOMER_TECHNICIAN_REMARK, REPAIR_DATE) VALUES (NEXT VALUE FOR AGENT_ID_SEQUENCE,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'TICKET_ID_SEQUENCE'),'2023-03-04','Initiated Refund','2023-03-21');

INSERT INTO WALLET (WALLET_ID, BALANCE) VALUES (NEXT VALUE FOR WALLET_ID_SEQUENCE,1200.38);
INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, MOBILE_NUMBER, EMAIL_ID, MEMBERSHIP_ID, MEMBERSHIP_END_DATE, WALLET_ID) VALUES (NEXT VALUE FOR CUSTOMER_ID_SEQUENCE,'YUHAN','XUE',8576268722,'YUHAN.XUE@HOTMAIL.COM',1,GETDATE() + 7 ,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'WALLET_ID_SEQUENCE'));
INSERT INTO TICKETING_QUEUE (TICKET_ID, CUSTOMER_ID, EmployeeID, TICKET_DESC, TICKET_STATUS) VALUES (NEXT VALUE FOR TICKET_ID_SEQUENCE, (SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'CUSTOMER_ID_SEQUENCE'),10000002,'MEMBERSHIP RENEWAL ISSUES','ASSIGNED');
INSERT INTO TECHNICIAN (AGENT_ID, TICKET_ID, ORDER_DATE, CUSTOMER_TECHNICIAN_REMARK, REPAIR_DATE) VALUES (NEXT VALUE FOR AGENT_ID_SEQUENCE,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'TICKET_ID_SEQUENCE'),'2023-03-04','Machine needs minor Repair','2023-03-21');

INSERT INTO WALLET (WALLET_ID, BALANCE) VALUES (NEXT VALUE FOR WALLET_ID_SEQUENCE,290.32);
INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, MOBILE_NUMBER, EMAIL_ID, MEMBERSHIP_ID, MEMBERSHIP_END_DATE, WALLET_ID) VALUES (NEXT VALUE FOR CUSTOMER_ID_SEQUENCE,'YIYEN','LEE',3316268722,'YIYEN.LEE@HOTMAIL.COM',1,GETDATE() + 7 ,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'WALLET_ID_SEQUENCE'));
INSERT INTO TICKETING_QUEUE (TICKET_ID, CUSTOMER_ID, EmployeeID, TICKET_DESC, TICKET_STATUS) VALUES (NEXT VALUE FOR TICKET_ID_SEQUENCE, (SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'CUSTOMER_ID_SEQUENCE'),10000003,'BIKE ISSUES','CLOSED');
INSERT INTO TECHNICIAN (AGENT_ID, TICKET_ID, ORDER_DATE, CUSTOMER_TECHNICIAN_REMARK, REPAIR_DATE) VALUES (NEXT VALUE FOR AGENT_ID_SEQUENCE,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'TICKET_ID_SEQUENCE'),'2023-04-02','ISSUE RESOLVED NOW','2023-04-05');

INSERT INTO WALLET (WALLET_ID, BALANCE) VALUES (NEXT VALUE FOR WALLET_ID_SEQUENCE,190.52);
INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, MOBILE_NUMBER, EMAIL_ID, MEMBERSHIP_ID, MEMBERSHIP_END_DATE, WALLET_ID) VALUES (NEXT VALUE FOR CUSTOMER_ID_SEQUENCE,'SIMON','WANG',2226268722,'SIMON.WANG@HOTMAIL.COM',1,GETDATE() + 7 ,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'WALLET_ID_SEQUENCE'));
INSERT INTO TICKETING_QUEUE (TICKET_ID, CUSTOMER_ID, EmployeeID, TICKET_DESC, TICKET_STATUS) VALUES (NEXT VALUE FOR TICKET_ID_SEQUENCE, (SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'CUSTOMER_ID_SEQUENCE'),10000000,'MEMBERSHIP ISSUES','ASSIGNED');
INSERT INTO TECHNICIAN (AGENT_ID, TICKET_ID, ORDER_DATE, CUSTOMER_TECHNICIAN_REMARK, REPAIR_DATE) VALUES (NEXT VALUE FOR AGENT_ID_SEQUENCE,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'TICKET_ID_SEQUENCE'),'2023-03-01','Manually Added Membership','2023-03-11');

INSERT INTO WALLET (WALLET_ID, BALANCE) VALUES (NEXT VALUE FOR WALLET_ID_SEQUENCE,100.2);
INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, MOBILE_NUMBER, EMAIL_ID, MEMBERSHIP_ID, MEMBERSHIP_END_DATE, WALLET_ID) VALUES (NEXT VALUE FOR CUSTOMER_ID_SEQUENCE,'HAZEL','LOBO',1026268722,'HAZEL.LOBO@HOTMAIL.COM',1,GETDATE() + 7 ,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'WALLET_ID_SEQUENCE'));
INSERT INTO TICKETING_QUEUE (TICKET_ID, CUSTOMER_ID, EmployeeID, TICKET_DESC, TICKET_STATUS) VALUES (NEXT VALUE FOR TICKET_ID_SEQUENCE, (SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'CUSTOMER_ID_SEQUENCE'),10000001,'SEAT ISSUE','CLOSED');
INSERT INTO TECHNICIAN (AGENT_ID, TICKET_ID, ORDER_DATE, CUSTOMER_TECHNICIAN_REMARK, REPAIR_DATE) VALUES (NEXT VALUE FOR AGENT_ID_SEQUENCE,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'TICKET_ID_SEQUENCE'),'2023-03-24','Machine Working Fine NOW','2023-03-30');
  
INSERT INTO WALLET (WALLET_ID, BALANCE) VALUES (NEXT VALUE FOR WALLET_ID_SEQUENCE,5000.77);
INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, MOBILE_NUMBER, EMAIL_ID, MEMBERSHIP_ID, MEMBERSHIP_END_DATE, WALLET_ID) VALUES (NEXT VALUE FOR CUSTOMER_ID_SEQUENCE,'JOEY','TRIBIYANI',7021879002,'JOEY.TRIBIYANI@HOTMAIL.COM',2,GETDATE() + 30 ,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'WALLET_ID_SEQUENCE'));
INSERT INTO TICKETING_QUEUE (TICKET_ID, CUSTOMER_ID, EmployeeID, TICKET_DESC, TICKET_STATUS) VALUES (NEXT VALUE FOR TICKET_ID_SEQUENCE, (SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'CUSTOMER_ID_SEQUENCE'),10000007,'BIKE ISSUE','ASSIGNED');
INSERT INTO TECHNICIAN (AGENT_ID, TICKET_ID, ORDER_DATE, CUSTOMER_TECHNICIAN_REMARK, REPAIR_DATE) VALUES (NEXT VALUE FOR AGENT_ID_SEQUENCE,(SELECT CAST(current_value AS int) FROM sys.sequences WHERE name = 'TICKET_ID_SEQUENCE'),'2023-03-09','Machine needs minor Repair','2023-03-15');


-- INSERT INTO RENT Table

INSERT INTO RENT (RENT_ID, CUSTOMER_ID, BIKE_ID, PICKUP_TIME, DROP_TIME, COUPON_ID, PAYMENT_STATUS)
VALUES (NEXT VALUE FOR RENT_ID_SEQUENCE, 10001, 1008, GETDATE(), DATEADD(minute, 120, GETDATE()), NULL, 'UNPAID');

INSERT INTO RENT (RENT_ID, CUSTOMER_ID, BIKE_ID, PICKUP_TIME, DROP_TIME, COUPON_ID, PAYMENT_STATUS)
VALUES (NEXT VALUE FOR RENT_ID_SEQUENCE, 10002, 1009, GETDATE(),DATEADD(minute, 90, GETDATE()), NULL, 'PAID');

INSERT INTO RENT (RENT_ID, CUSTOMER_ID, BIKE_ID, PICKUP_TIME, DROP_TIME, COUPON_ID, PAYMENT_STATUS)
VALUES (NEXT VALUE FOR RENT_ID_SEQUENCE, 10003, 1010, GETDATE(), DATEADD(minute, 45, GETDATE()), NULL, 'UNPAID');

INSERT INTO RENT (RENT_ID, CUSTOMER_ID, BIKE_ID, PICKUP_TIME, DROP_TIME, COUPON_ID, PAYMENT_STATUS)
VALUES (NEXT VALUE FOR RENT_ID_SEQUENCE, 10004, 1015, GETDATE(), DATEADD(minute, 75, GETDATE()), 12, 'PAID');

INSERT INTO RENT (RENT_ID, CUSTOMER_ID, BIKE_ID, PICKUP_TIME, DROP_TIME, COUPON_ID, PAYMENT_STATUS)
VALUES (NEXT VALUE FOR RENT_ID_SEQUENCE, 10005, 1016, GETDATE(), DATEADD(minute, 30, GETDATE()), NULL, 'UNPAID');

INSERT INTO RENT (RENT_ID, CUSTOMER_ID, BIKE_ID, PICKUP_TIME, DROP_TIME, COUPON_ID, PAYMENT_STATUS)
VALUES (NEXT VALUE FOR RENT_ID_SEQUENCE, 10006, 1017, GETDATE(), DATEADD(minute, 180, GETDATE()), 13, 'PAID');

INSERT INTO RENT (RENT_ID, CUSTOMER_ID, BIKE_ID, PICKUP_TIME, DROP_TIME, COUPON_ID, PAYMENT_STATUS)
VALUES (NEXT VALUE FOR RENT_ID_SEQUENCE, 10007, 1018, GETDATE(), DATEADD(minute, 60, GETDATE()), NULL, 'UNPAID');

INSERT INTO RENT (RENT_ID, CUSTOMER_ID, BIKE_ID, PICKUP_TIME, DROP_TIME, COUPON_ID, PAYMENT_STATUS)
VALUES (NEXT VALUE FOR RENT_ID_SEQUENCE, 10008, 1019, GETDATE(), DATEADD(minute, 150, GETDATE()), NULL, 'PAID');

INSERT INTO RENT (RENT_ID, CUSTOMER_ID, BIKE_ID, PICKUP_TIME, DROP_TIME, COUPON_ID, PAYMENT_STATUS)
VALUES (NEXT VALUE FOR RENT_ID_SEQUENCE, 10009, 1020, GETDATE(), DATEADD(minute, 120, GETDATE()), NULL, 'UNPAID');

INSERT INTO RENT (RENT_ID, CUSTOMER_ID, BIKE_ID, PICKUP_TIME, DROP_TIME, COUPON_ID, PAYMENT_STATUS)
VALUES (NEXT VALUE FOR RENT_ID_SEQUENCE, 10010, 1021, GETDATE(), DATEADD(minute, 90, GETDATE()), NULL, 'PAID');

-- INSERT INTO TRIP Table

INSERT INTO TRIP (TRIP_ID, CUSTOMER_ID, BIKE_ID, START_DOCK_ID, END_DOCK_ID, START_TIME, END_TIME)
VALUES 
  (NEXT VALUE FOR TRIP_ID_SEQUENCE, 10000, 1008, 100, 102, '2023-04-05 10:00:00', '2023-04-05 11:30:00'),
  (NEXT VALUE FOR TRIP_ID_SEQUENCE, 10001, 1019, 101, 103, '2023-04-05 12:10:00', '2023-04-05 13:10:00'),
  (NEXT VALUE FOR TRIP_ID_SEQUENCE, 10002, 1040, 104, 103, '2023-04-05 14:24:00', '2023-04-05 15:15:00'),
  (NEXT VALUE FOR TRIP_ID_SEQUENCE, 10003, 1021, 100, 104, '2023-04-05 16:40:00', '2023-04-05 17:21:00'),
  (NEXT VALUE FOR TRIP_ID_SEQUENCE, 10002, 1012, 107, 105, '2023-04-05 18:20:00', '2023-04-05 19:00:00'),
  (NEXT VALUE FOR TRIP_ID_SEQUENCE, 10005, 1013, 105, 106, '2023-04-05 20:56:00', '2023-04-05 21:20:00'),
  (NEXT VALUE FOR TRIP_ID_SEQUENCE, 10001, 1024, 103, 107, '2023-04-05 22:39:00', '2023-04-05 23:36:00'),
  (NEXT VALUE FOR TRIP_ID_SEQUENCE, 10007, 1015, 101, 101, '2023-04-06 08:33:00', '2023-04-06 09:55:00'),
  (NEXT VALUE FOR TRIP_ID_SEQUENCE, 10008, 1036, 107, 109, '2023-04-06 10:16:00', '2023-04-06 11:01:00'),
  (NEXT VALUE FOR TRIP_ID_SEQUENCE, 10009, 1055, 108, 108, '2023-04-06 12:09:00', '2023-04-06 13:53:00'),
  (NEXT VALUE FOR TRIP_ID_SEQUENCE, 10010, 1018, 106, 100, '2023-04-07 14:36:00', '2023-04-07 16:28:00'),
  (NEXT VALUE FOR TRIP_ID_SEQUENCE, 10011, 1019, 109, 109, '2023-04-08 10:11:00', '2023-04-08 10:45:00'),
  (NEXT VALUE FOR TRIP_ID_SEQUENCE, 10001, 1020, 109, 102, '2023-04-09 12:20:00', '2023-04-09 13:15:00');


-- INSERT INTO Feedback Table

INSERT INTO FEEDBACK (FEEDBACK_ID, FEEDBACK_DATE, CUSTOMER_ID, FEEDBACK_DESCRIPTION)
VALUES (NEXT VALUE FOR FEEDBACK_ID_SEQUENCE, '2023-04-05', 10000, 'This is a sample feedback description.');

INSERT INTO FEEDBACK (FEEDBACK_ID, FEEDBACK_DATE, CUSTOMER_ID, FEEDBACK_DESCRIPTION)
VALUES (NEXT VALUE FOR FEEDBACK_ID_SEQUENCE, '2023-02-05', 10001, 'Thank you for the great service!');

INSERT INTO FEEDBACK (FEEDBACK_ID, FEEDBACK_DATE, CUSTOMER_ID, FEEDBACK_DESCRIPTION)
VALUES (NEXT VALUE FOR FEEDBACK_ID_SEQUENCE, '2023-03-08', 10002, 'I had a bad experience with one of your representatives.');

INSERT INTO FEEDBACK (FEEDBACK_ID, FEEDBACK_DATE, CUSTOMER_ID, FEEDBACK_DESCRIPTION)
VALUES (NEXT VALUE FOR FEEDBACK_ID_SEQUENCE, '2023-04-03', 10003, 'Your product is excellent!');

INSERT INTO FEEDBACK (FEEDBACK_ID, FEEDBACK_DATE, CUSTOMER_ID, FEEDBACK_DESCRIPTION)
VALUES (NEXT VALUE FOR FEEDBACK_ID_SEQUENCE, '2023-01-20', 10001, 'Your Map website is difficult to navigate.');

INSERT INTO FEEDBACK (FEEDBACK_ID, FEEDBACK_DATE, CUSTOMER_ID, FEEDBACK_DESCRIPTION)
VALUES (NEXT VALUE FOR FEEDBACK_ID_SEQUENCE, '2023-02-28', 10005, 'I am very satisfied with my purchase.');

INSERT INTO FEEDBACK (FEEDBACK_ID, FEEDBACK_DATE, CUSTOMER_ID, FEEDBACK_DESCRIPTION)
VALUES (NEXT VALUE FOR FEEDBACK_ID_SEQUENCE, '2023-03-31', 10006, 'Your customer service is outstanding!');

INSERT INTO FEEDBACK (FEEDBACK_ID, FEEDBACK_DATE, CUSTOMER_ID, FEEDBACK_DESCRIPTION)
VALUES (NEXT VALUE FOR FEEDBACK_ID_SEQUENCE, '2023-01-30', 10007, 'I received the most comfortable bike');

INSERT INTO FEEDBACK (FEEDBACK_ID, FEEDBACK_DATE, CUSTOMER_ID, FEEDBACK_DESCRIPTION)
VALUES (NEXT VALUE FOR FEEDBACK_ID_SEQUENCE, '2023-03-29', 10008, 'Your product did not meet my expectations.');

INSERT INTO FEEDBACK (FEEDBACK_ID, FEEDBACK_DATE, CUSTOMER_ID, FEEDBACK_DESCRIPTION)
VALUES (NEXT VALUE FOR FEEDBACK_ID_SEQUENCE, '2023-04-04', 10009, 'Your prices are too high.');

INSERT INTO FEEDBACK (FEEDBACK_ID, FEEDBACK_DATE, CUSTOMER_ID, FEEDBACK_DESCRIPTION)
VALUES (NEXT VALUE FOR FEEDBACK_ID_SEQUENCE, '2023-01-15', 10010, 'Best Bike Providing service');

INSERT INTO FEEDBACK (FEEDBACK_ID, FEEDBACK_DATE, CUSTOMER_ID, FEEDBACK_DESCRIPTION)
VALUES (NEXT VALUE FOR FEEDBACK_ID_SEQUENCE, '2023-03-26', 10011, 'Dock are a bit Far from Each other');

END
GO

-- STORED PROCEDURE FOR CREATING VIEWS 

CREATE PROCEDURE CREATE_ALL_VIEWS
AS
BEGIN
    --1 Bike availability by dock
    EXEC ('CREATE VIEW BIKE_AVAILABILITY_BY_DOCK AS
            SELECT DOCK.DOCK_NAME, COUNT(BIKE.BIKE_ID) AS AVAILABLE_BIKES
            FROM DOCK
            LEFT JOIN BIKE ON DOCK.DOCK_ID = BIKE.DOCK_ID AND BIKE.BIKE_STATUS = ''AVAILABLE''
            GROUP BY DOCK.DOCK_NAME')

    --2 Customer membership status
    EXEC ('CREATE VIEW CUSTOMER_MEMBERSHIP_STATUS AS
            SELECT CUSTOMER.CUSTOMER_ID, CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME, MEMBERSHIP.MEMBERSHIP_TYPE, CUSTOMER.MEMBERSHIP_END_DATE, WALLET.BALANCE
            FROM CUSTOMER
            LEFT JOIN MEMBERSHIP ON CUSTOMER.MEMBERSHIP_ID = MEMBERSHIP.MEMBERSHIP_ID
            LEFT JOIN WALLET ON CUSTOMER.WALLET_ID = WALLET.WALLET_ID')

    --3 Ticketing queue details
    EXEC ('CREATE VIEW TICKETING_QUEUE_DETAILS AS
            SELECT TICKETING_QUEUE.TICKET_ID, CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME, EMPLOYEE.FirstName + '' '' + EMPLOYEE.LastName AS AGENT_NAME, TICKETING_QUEUE.TICKET_DESC, TICKETING_QUEUE.TICKET_STATUS
            FROM TICKETING_QUEUE
            LEFT JOIN CUSTOMER ON TICKETING_QUEUE.CUSTOMER_ID = CUSTOMER.CUSTOMER_ID
            LEFT JOIN EMPLOYEE ON TICKETING_QUEUE.EmployeeID = EMPLOYEE.EmployeeID')

    --4 Technician and repair details
    EXEC ('CREATE VIEW TECHNICIAN_REPAIR_DETAILS AS
            SELECT TICKETING_QUEUE.TICKET_ID, TECHNICIAN.AGENT_ID, TECHNICIAN.ORDER_DATE, TECHNICIAN.CUSTOMER_TECHNICIAN_REMARK, TECHNICIAN.REPAIR_DATE
            FROM TICKETING_QUEUE
            LEFT JOIN TECHNICIAN ON TICKETING_QUEUE.TICKET_ID = TECHNICIAN.TICKET_ID')

    --5 Active bikes by model
    EXEC ('CREATE VIEW ACTIVE_BIKES_BY_MODEL AS
            SELECT BIKE.BIKE_MODEL, COUNT(BIKE.BIKE_ID) AS ACTIVE_BIKES
            FROM BIKE
            WHERE BIKE.BIKE_STATUS = ''AVAILABLE''
            GROUP BY BIKE.BIKE_MODEL')

    --6 Details of all rented bikes:
    EXEC ('CREATE VIEW RENTED_BIKES AS
            SELECT b.BIKE_ID, b.BIKE_MODEL, c.FIRST_NAME, c.LAST_NAME, r.PICKUP_TIME, r.DROP_TIME
            FROM BIKE b
            JOIN RENT r ON b.BIKE_ID = r.BIKE_ID
            JOIN CUSTOMER c ON r.CUSTOMER_ID = c.CUSTOMER_ID
            WHERE b.BIKE_STATUS = ''UNAVAILABLE''')
END
GO



-- STEP 5 - Executing Stored Procedure to Create Tables, Sequences, Triggers, Views and Inserting Data
CREATE PROCEDURE Create_Database
AS
BEGIN
EXEC CREATETABLE;
EXEC SEQUENCETABLE;
EXEC INSERTTABLE;
EXEC CREATE_ALL_VIEWS;
END
GO


CREATE PROCEDURE Select_all
AS
BEGIN
-- Select Query for all the tables
select * from rent;
select * from wallet;
select * from customer;
select * from TICKETING_QUEUE;
select * from EMPLOYEE;
select * from BIKE;
select * from dock;
select * from trip;
select * from technician;
select * from discount;
select * from membership;
-- Select Query for Views
select * from BIKE_AVAILABILITY_BY_DOCK
select * from RENTED_BIKES;
select * from ACTIVE_BIKES_BY_MODEL;
select * from TECHNICIAN_REPAIR_DETAILS;
select * from TICKETING_QUEUE_DETAILS;
select * from CUSTOMER_MEMBERSHIP_STATUS;

-- Select Query for Table Created after Executing Trigger
SELECT * FROM DISCOUNT_VALUE_HISTORY;
END
GO

-- Stored Procedure to Drop Views

CREATE PROCEDURE DROP_all_Views
AS
BEGIN

Drop view RENTED_BIKES;
Drop view ACTIVE_BIKES_BY_MODEL;
Drop view TECHNICIAN_REPAIR_DETAILS;
Drop view TICKETING_QUEUE_DETAILS;
Drop view CUSTOMER_MEMBERSHIP_STATUS;
Drop view BIKE_AVAILABILITY_BY_DOCK;

END
GO


-- Stored Procedure to Drop Tables and Sequences

CREATE PROCEDURE DROP_all_Tables_Sequences
AS
BEGIN

DROP SEQUENCE FEEDBACK_ID_SEQUENCE;
DROP SEQUENCE TRIP_ID_SEQUENCE;
DROP SEQUENCE AGENT_ID_SEQUENCE;
DROP SEQUENCE TICKET_ID_SEQUENCE;
DROP SEQUENCE EMPLOYEE_ID_SEQUENCE;
DROP SEQUENCE RENT_ID_SEQUENCE;
DROP SEQUENCE WALLET_ID_SEQUENCE;
DROP SEQUENCE CUSTOMER_ID_SEQUENCE;
DROP SEQUENCE BIKE_ID_SEQUENCE;
DROP SEQUENCE DOCK_ID_SEQUENCE;
DROP SEQUENCE COUPON_ID_SEQUENCE;
DROP SEQUENCE MEMBERSHIP_ID_SEQUENCE;

DROP TABLE FEEDBACK;
DROP TABLE TRIP;
DROP TABLE TECHNICIAN;
DROP TABLE TICKETING_QUEUE;
DROP TABLE Employee;
DROP TABLE RENT;
DROP TABLE CUSTOMER;
DROP TABLE MEMBERSHIP;
DROP TABLE BIKE;
DROP TABLE DOCK;
DROP TABLE WALLET;
DROP TABLE DISCOUNT;

END
GO

-- Creating Stored Procedure to Clean-up the entire Database
CREATE PROCEDURE CLeanup_Database
AS
BEGIN

EXEC DROP_all_Views;
EXEC DROP_all_Tables_Sequences;
DROP PROCEDURE DROP_all_Tables_Sequences;
DROP PROCEDURE DROP_all_Views;
DROP PROCEDURE CREATE_ALL_VIEWS;
DROP PROCEDURE INSERTTABLE;
DROP PROCEDURE SEQUENCETABLE;
DROP PROCEDURE CREATETABLE;
DROP FUNCTION discount_check;
DROP FUNCTION check_wallet_balance_limit;
DROP FUNCTION check_zip_code_MA;
DROP FUNCTION fn_bike_status_valid;
DROP FUNCTION CheckMembershipAmount;
DROP FUNCTION ValidateMobileNumber;
DROP FUNCTION ValidateDropTime;
DROP FUNCTION fn_CheckEmployeeAge;
DROP FUNCTION CheckTicketDescriptionLength;
DROP FUNCTION funcValidateRepairDate;
DROP FUNCTION ValidateTripDuration;
DROP FUNCTION ValidateFeedbackDate;
DROP FUNCTION ValidateDropTimeCC;
DROP TRIGGER TRG_DISCOUNT_UPDATE;
END
GO

-- FINAL STEP





EXEC Create_Database;

--EXTRA FEATURE: Created a trigger on discount so that when coupon value is updated it creates a table where it shows old coupon value and new coupon value

GO
CREATE TRIGGER TRG_DISCOUNT_UPDATE
ON DISCOUNT
AFTER UPDATE
AS
BEGIN
    IF UPDATE(COUPON_VALUE)
    BEGIN
        IF OBJECT_ID('DISCOUNT_VALUE_HISTORY') IS NULL
        BEGIN
            CREATE TABLE DISCOUNT_VALUE_HISTORY (
                COUPON_ID INT NOT NULL,
                OLD_VALUE DECIMAL(6,2) NOT NULL,
                NEW_VALUE DECIMAL(6,2) NOT NULL,
                CHANGE_DATE DATETIME NOT NULL
            );
        END
        INSERT INTO DISCOUNT_VALUE_HISTORY (COUPON_ID, OLD_VALUE, NEW_VALUE, CHANGE_DATE)
        SELECT d.COUPON_ID, d.COUPON_VALUE, i.COUPON_VALUE, GETDATE()
        FROM inserted i
        INNER JOIN deleted d ON i.COUPON_ID = d.COUPON_ID
    END
END;

GO
UPDATE DISCOUNT
SET COUPON_VALUE = 28.00, COUPON_STATUS = 'INACTIVE'
WHERE COUPON_ID = 10;

-- EXCUTING Select Query to select all the tables and views in the Database

GO
EXEC Select_all;

-- TABLE DISPLAYING BOTH ENCRYPTED AND DECRYPTED VALUES

OPEN SYMMETRIC KEY SymKey_test
        DECRYPTION BY CERTIFICATE Certificate_test;

Select *,CONVERT(VARCHAR , DECRYPTBYKEY(COUPON_NAME)) as DECRYPTED_COUPON_NAME from DISCOUNT;

CLOSE SYMMETRIC KEY SymKey_test;
         
-- EXEC CLeanup_Database;
